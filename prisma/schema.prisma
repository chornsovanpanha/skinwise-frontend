// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum UserRole {
  ADMIN
  EDITOR
  USER
}

enum LoginBy {
  email
  facebook
  gmail
  apple
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  altText   String?
  width     Int?
  height    Int?
  createdAt DateTime @default(now())

  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId Int?
  product   Product? @relation(fields: [productId], references: [id])

  ingredientId Int?
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])

  @@unique([userId, url])
  @@unique([productId, url])
  @@unique([ingredientId, url])
}

model UserUsage {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  productViews    Int      @default(0)
  ingredientViews Int      @default(0)
  lastResetAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//  User Schema 
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  platform  String?
  loginBy   LoginBy  @default(email)
  role      UserRole @default(USER)

  sessions            Session[]
  passwordResetTokens PasswordResetToken[]
  Image               Image[]
  subscription        Subscription?
  profile             Profile?
  userUsage           UserUsage?
  lastSearch          DateTime?            @default(now())
  searchCount         Int                  @default(0)
}

model Subscription {
  id            Int                 @id @default(autoincrement())
  userId        Int                 @unique
  stripeId      String?             @unique // Stripe subscription ID
  stripePriceId String? // Stripe Price ID for the plan
  plan          PlanType?
  status        SubscriptionStatus? @default(NEW)

  startedAt DateTime  @default(now())
  endedAt   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, stripeId])
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

//Skin care product schema
model Brand {
  id        Int       @id @default(autoincrement())
  alias     String
  title     String
  country   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id      Int     @id @default(autoincrement())
  name    String
  code    String? @unique
  alias   String?
  desc    String?
  rating  Int     @default(0)
  brandId Int
  brand   Brand   @relation(fields: [brandId], references: [id])

  // Relations
  ingredients      ProductIngredient[]
  insideGroups     InsideGroup[]
  effects          ProductEffect[]
  RoutineItem      RoutineItem[]
  Image            Image[]
  searchCount      Int?                @default(0)
  ProductSkinMatch ProductSkinMatch[]

  @@index([name])
  @@index([alias])
}

model Ingredient {
  id          Int     @id @default(autoincrement())
  name        String? // e.g. "Retinol (Vitamin A)"
  desc        String? // Short description
  about       String? // Longer "About this ingredient"
  alias       String
  searchCount Int?    @default(0)

  // Relations
  products            ProductIngredient[] // Many to many 
  insideGroups        IngredientInsideGroup[] // Many to many 
  effects             IngredientEffect[]
  similarFrom         SimilarIngredient[]     @relation("FromIngredient")
  similarTo           SimilarIngredient[]     @relation("ToIngredient")
  Image               Image[]
  IngredientSkinMatch IngredientSkinMatch[]

  @@index([name])
  @@index([alias])
}

//Many to Many
model ProductIngredient {
  productId     Int
  ingredientId  Int
  concentration String?
  notes         String?
  isKey         Boolean @default(false)

  product    Product    @relation(fields: [productId], references: [id])
  ingredient Ingredient @relation(fields: [ingredientId], references: [id])

  @@id([productId, ingredientId])
}

model InsideGroup {
  id        Int     @id @default(autoincrement())
  productId Int
  title     String // e.g. "Allergens"
  product   Product @relation(fields: [productId], references: [id])
}

model ProductEffect {
  id        Int        @id @default(autoincrement())
  productId Int
  type      EffectType
  title     String
  shortDesc String?
  desc      String?

  product Product @relation(fields: [productId], references: [id])
}

/// "Whatâ€™s inside" for Ingredients (like allergens, chemical families, PEGs, etc.)
model IngredientInsideGroup {
  id           Int        @id @default(autoincrement())
  ingredientId Int
  title        String // e.g. "Allergens"
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
}

/// Ingredient effects (positive or negative)
model IngredientEffect {
  id           Int        @id @default(autoincrement())
  ingredientId Int
  type         EffectType
  title        String // e.g. "Anti-aging"
  shortDesc    String? // "Boosts collagen"
  desc         String? // full explanation

  ingredient Ingredient @relation(fields: [ingredientId], references: [id])
}

/// Similar ingredients relation (self-referencing many-to-many)
model SimilarIngredient {
  fromId Int
  toId   Int

  from Ingredient @relation("FromIngredient", fields: [fromId], references: [id])
  to   Ingredient @relation("ToIngredient", fields: [toId], references: [id])

  @@id([fromId, toId])
}

model Profile {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  skinType     SkinType?
  skinTypeDesc String?
  allergies    String[] // e.g. ["Fragrance", "Limonene"]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  concerns SkinConcern[] @relation("ProfileConcerns") // many-to-many
  routines Routine[]
}

model SkinConcern {
  id   Int    @id @default(autoincrement())
  name String

  profiles Profile[] @relation("ProfileConcerns") // many-to-many
}

model Routine {
  id        Int         @id @default(autoincrement())
  profileId Int
  type      RoutineType // MORNING, EVENING, etc.
  name      String? // optional, e.g., "Monday Morning Routine"
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  profile Profile       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  items   RoutineItem[]
}

model RoutineItem {
  id        Int     @id @default(autoincrement())
  routineId Int
  productId Int
  usage     String // Monday, tues,...etc 'M,T,W,'
  routine   Routine @relation(fields: [routineId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model ProductSkinMatch {
  id        Int      @id @default(autoincrement())
  productId Int
  skinType  SkinType
  score     Float

  product Product @relation(fields: [productId], references: [id])

  @@unique([productId, skinType])
}

model IngredientSkinMatch {
  id           Int      @id @default(autoincrement())
  ingredientId Int
  skinType     SkinType
  score        Float

  ingredient Ingredient @relation(fields: [ingredientId], references: [id])

  @@unique([ingredientId, skinType])
}

enum RoutineType {
  MORNING
  EVENING
  NIGHT
  BOTH
}

enum SkinType {
  OILY
  DRY
  COMBINATION
  NORMAL
  SENSITIVE
}

enum EffectType {
  POSITIVE
  NEGATIVE
}

enum PlanType {
  FREE
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  NEW
  CANCELED
}
